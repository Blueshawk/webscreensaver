#!/usr/bin/env python2

# WebScreensaver - Make any web page a screensaver

import os
import sys
import random

import gobject
import gtk
import webkit

class WebScreensaver(object):
	def __init__(self, url='http://www.google.com', window_id=None):
		if window_id:
			self.window_id = window_id
		else:
			self.window_id = None

		self.w = 640
		self.h = 480
		self.url = url

	def setup_window(self):
		win = None

		if self.window_id:
			win = gtk.Window(gtk.WINDOW_POPUP)
			self.gdk_win = gtk.gdk.window_foreign_new(self.window_id)

			x, y, w, h, _ = self.gdk_win.get_geometry()

			win.set_has_window(True)
			win.set_window(self.gdk_win)

			win.move(x, y)
			win.set_default_size(w, h)
			win.set_size_request(w, h)

			win.set_realized(True)

			self.w, self.h = w, h
		else:
			win = gtk.Window()
			win.set_default_size(self.w, self.h)

		self.win = win

	def setup_browser(self):
		browser = webkit.WebView()

		# Enable webgl
		settings = browser.get_settings()
		settings.set_property('enable-webgl', True)

		if self.w < 320 and self.h < 240:
			 browser.set_full_content_zoom(True)
			 browser.set_zoom_level(0.4)

		browser.set_size_request(self.w, self.h)

		self.browser = browser

	def setup_layout(self):
		sw = gtk.Layout()
		sw.put(self.browser, 0, 0)
		self.win.add(sw)

	def setup(self):
		self.setup_window()
		self.setup_browser()
		self.setup_layout()

		self.win.connect('destroy', gtk.main_quit)
		self.win.show_all()
		self.browser.open(self.url)

	@classmethod
	def determine_window_id(cls, win_id=None):
		if not win_id:
			win_id = os.getenv('XSCREENSAVER_WINDOW')

		if win_id:
			win_id = long(int(win_id, 16))

		return win_id

class WebHacks(object):
	class Hack(object):
		__slots__ = "name url script".split(" ")

		def __init__(self, name, url, script=None):
			self.name, self.url, self.script = name, url, script

	hacks = {
		Hack('starfield',		'http://www.chiptune.com/starfield/starfield.html'),
		Hack('conductor',		'http://www.mta.me/'),
		Hack('reactive-ball',	'http://lab.aerotwist.com/webgl/reactive-ball/'),
		Hack('kinect',			'http://mrdoob.com/lab/javascript/webgl/kinect/'),
		Hack('endless-forest',	'http://oos.moxiecode.com/js_webgl/forest/index.html'),
		Hack('cell-shader',		'http://www.ro.me/tech/cel-shader'),
		Hack('hatching-glow',	'http://www.ro.me/tech/hatching-glow-shader'),
		Hack('marbles',			'http://experiments.joshua-perez.com/marbles/'),
		Hack('shadow-map',		'http://alteredqualia.com/three/examples/webgl_shadowmap.html')
	}

	@classmethod
	def print_list(cls):
		for hack in cls.hacks:
			print "%15s\t%s" % (hack.name, hack.url)

	@classmethod
	def determine_screensaver(cls, name=None):
		for hack in cls.hacks:
			if hack.name == name:
				return hack		

		return random.choice(cls.hacks)

if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser(description='WebScreensaver: Run a web page as your screensaver')
	parser.add_argument('-window-id', help='XID of Window to draw on')
	parser.add_argument('-url', help='URL of page to display')
	parser.add_argument('-choose', help='Select a favourite')
	parser.add_argument('-list', action='store_true', help='List favourites')
	args = parser.parse_args()

	if args.list:
		WebHacks.print_list()
		sys.exit(0)

	gobject.threads_init()

	if args.url:
		url = args.url
	else:
		url = WebHacks.determine_screensaver(args.choose).url

	saver = WebScreensaver(
		url=url,
		window_id=WebScreensaver.determine_window_id(args.window_id),
	)
	saver.setup()

	gtk.mainloop()
